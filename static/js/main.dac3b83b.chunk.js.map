{"version":3,"sources":["component/Button.jsx","component/Card.jsx","component/Levels.jsx","component/Board.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","handleClick","disabled","title","className","onClick","Card","props","id","flip","value","setCompareArr","src","alt","Levels","levelSetUp","easy","medium","hard","customeLevel","customLevelSetup","htmlFor","type","name","min","max","step","onChange","e","preventDefault","customInput","createCardValue","cardLevel","card","i","push","Math","ceil","sort","random","Board","useState","gameStart","setgameStart","playerName","setPlayerName","setCardLevel","cardDeck","setCardDeck","compareCardArr","setCompareCardArr","gameOver","setGameOver","heading","setHeading","pairCounter","setPairCounter","movesCounter","setMovesCounter","setcustomeLevel","restartGame","level","resetGame","gameEnd","baseScore","round","scoreCalculation","setTimeout","newState","map","item","preState","Object","prototype","toString","call","JSON","stringify","event","target","onSubmit","handleSubmit","required","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dac3b83b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Button({ handleClick, disabled, title }) {\r\n  return (\r\n    <button className=\"btn\" onClick={handleClick} disabled={disabled}>\r\n      {title}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","function Card(props) {\r\n  let { id, flip, value, setCompareArr } = props;\r\n\r\n  const handleClick = (id) => {\r\n    setCompareArr({ id, value, flip: true });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flip-card\" onClick={() => handleClick(id)} id={id}>\r\n      <div className={`flip-card-inner  ${flip ? \"flip\" : \"no-flip\"}`}>\r\n        <div className=\"flip-card-front\">\r\n          <img\r\n            src=\"https://image.shutterstock.com/image-illustration/try-your-luck-text-on-600w-1865733352.jpg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"flip-card-back\">\r\n          <h1>{value}</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import Button from \"./Button\";\r\n\r\nfunction Levels({\r\n  levelSetUp,\r\n  easy,\r\n  medium,\r\n  hard,\r\n  customeLevel,\r\n  customLevelSetup,\r\n}) {\r\n  const easyLevel = () => {\r\n    levelSetUp(easy);\r\n  };\r\n  const mediumLevel = () => {\r\n    levelSetUp(medium);\r\n  };\r\n  const hardLevel = () => {\r\n    levelSetUp(hard);\r\n  };\r\n  const customInput = (e) => {\r\n    e.preventDefault();\r\n    levelSetUp(customeLevel);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"levels\">\r\n        <Button title=\"Easy\" handleClick={easyLevel} />\r\n        <Button title=\"medium\" handleClick={mediumLevel} />\r\n        <Button title=\"Hard\" handleClick={hardLevel} />\r\n      </div>\r\n      <form>\r\n        <label htmlFor=\"customeInput\">Customize your game: </label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"customeInput\"\r\n          id=\"customeInput\"\r\n          value={customeLevel}\r\n          min={8}\r\n          max={24}\r\n          step={2}\r\n          onChange={(e) => customLevelSetup(e)}\r\n        />\r\n        <Button title=\"Add\" handleClick={(e) => customInput(e)} />\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Levels;\r\n","import { useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport Card from \"./Card\";\r\nimport Levels from \"./Levels\";\r\n\r\n// shuffle the cardValue array\r\nfunction shuffle(array) {\r\n  array.sort(() => Math.random() - 0.5);\r\n}\r\n\r\n// method to check {} is empty or not\r\nfunction isObjectEmpty(value) {\r\n  return (\r\n    Object.prototype.toString.call(value) === \"[object Object]\" &&\r\n    JSON.stringify(value) === \"{}\"\r\n  );\r\n}\r\n\r\n// creating values of the card\r\nconst createCardValue = (cardLevel) => {\r\n  const card = [];\r\n  for (let i = 1; i <= cardLevel; i++) {\r\n    card.push({\r\n      flip: false,\r\n      value: Math.ceil(i / 2),\r\n    });\r\n  }\r\n  shuffle(card); //initial game start\r\n  return card;\r\n};\r\n\r\nfunction Board() {\r\n  const easyLevel = 8,\r\n    mediumLevel = 16,\r\n    hardLevel = 24;\r\n\r\n  // initialinzing state\r\n  const [gameStart, setgameStart] = useState(false);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n  const [cardLevel, setCardLevel] = useState(easyLevel);\r\n  const [cardDeck, setCardDeck] = useState(createCardValue(cardLevel));\r\n  const [compareCardArr, setCompareCardArr] = useState({});\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [heading, setHeading] = useState(\"\");\r\n  const [pairCounter, setPairCounter] = useState(1);\r\n  const [movesCounter, setMovesCounter] = useState(0);\r\n  const [customeLevel, setcustomeLevel] = useState(easyLevel);\r\n\r\n  // Restarting the game after game is over\r\n  const restartGame = (level) => {\r\n    resetGame(level);\r\n    setHeading(`Hello! ${playerName}, Let's Rock!!ðŸš€ðŸš€`);\r\n    setGameOver(false);\r\n  };\r\n\r\n  // Resetting the game if player want to start over again.\r\n  const resetGame = (level) => {\r\n    // shuffle(card);\r\n    setCardDeck(createCardValue(level));\r\n    setCompareCardArr({});\r\n    setPairCounter(1);\r\n    setMovesCounter(0);\r\n  };\r\n\r\n  const scoreCalculation = () => {\r\n    let baseScore = cardLevel / 2 - 1;\r\n    return Math.round((baseScore / movesCounter) * 100);\r\n  };\r\n\r\n  // function to check game is ended or not\r\n  const gameEnd = () => {\r\n    if (pairCounter >= cardLevel / 2) {\r\n      setHeading(`Hurrah! ðŸŽ‰ You won with ${scoreCalculation()}% accuracy`);\r\n      setTimeout(() => {\r\n        setGameOver(true);\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  // Starting game according to level or custome input\r\n  const levelSetUp = (level) => {\r\n    setCardLevel(level);\r\n    restartGame(level);\r\n  };\r\n\r\n  const customLevelSetup = (event) => {\r\n    setcustomeLevel(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setHeading(`Hello! ${playerName}, Let's Rock!!ðŸš€ðŸš€`);\r\n    setgameStart(true);\r\n  };\r\n\r\n  const setCompareArr = (newState) => {\r\n    // updating CardDeck value according to new state value\r\n    setCardDeck(\r\n      cardDeck.map((item, id) => {\r\n        if (id === newState.id) {\r\n          item.flip = newState.flip;\r\n          return item;\r\n        } else {\r\n          return item;\r\n        }\r\n      })\r\n    );\r\n    // comparring previous click with new click and assigning value accordingly\r\n    setCompareCardArr((preState) => {\r\n      if (isObjectEmpty(preState)) {\r\n        return newState; // prev state is empty so returing new state value\r\n      } else if (preState.id === newState.id) {\r\n        return preState; // prev click and new click on same card, returning same value\r\n      } else if (preState.value === newState.value) {\r\n        setPairCounter(pairCounter + 1); // increasing pairCounter if preValue and newValue is same.\r\n        setMovesCounter(movesCounter + 1);\r\n        gameEnd();\r\n        return {};\r\n      } else {\r\n        setMovesCounter(movesCounter + 1);\r\n        setTimeout(() => {\r\n          // setting card value to previous state as pair is not found\r\n          setCardDeck(\r\n            cardDeck.map((item, id) => {\r\n              if (id === preState.id || id === newState.id) {\r\n                item.flip = false;\r\n                return item;\r\n              } else {\r\n                return item;\r\n              }\r\n            })\r\n          );\r\n        }, 500);\r\n        return {};\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {gameStart ? (\r\n        <>\r\n          <header className=\"board-header\">\r\n            <h2 className=\"board-heading score\">Moves: {movesCounter}</h2>\r\n            <h2 className=\"board-heading\">{heading}</h2>\r\n\r\n            <Button\r\n              handleClick={() => resetGame(cardLevel)}\r\n              disabled={gameOver}\r\n              title=\"Reset\"\r\n            />\r\n          </header>\r\n\r\n          <Levels\r\n            levelSetUp={levelSetUp}\r\n            easy={easyLevel}\r\n            medium={mediumLevel}\r\n            hard={hardLevel}\r\n            customeLevel={customeLevel}\r\n            customLevelSetup={customLevelSetup}\r\n          />\r\n\r\n          <div className=\"board-body\">\r\n            {gameOver ? (\r\n              <div className=\"winnerContainer\">\r\n                <iframe\r\n                  title=\"winner Gif\"\r\n                  src=\"https://giphy.com/embed/l0HlSDiA6WUytl9oA\"\r\n                  className=\"winnerGif\"\r\n                ></iframe>\r\n                <Button\r\n                  handleClick={() => restartGame(cardLevel)}\r\n                  title=\"Play Again\"\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div\r\n                className={`board-game  ${cardLevel >= 18 ? \"hard-board\" : \"\"}`}\r\n              >\r\n                {cardDeck.map((item, id) => (\r\n                  <Card\r\n                    key={id}\r\n                    cardDeck={cardDeck}\r\n                    {...item}\r\n                    id={id}\r\n                    compareCardArr={compareCardArr}\r\n                    setCompareArr={setCompareArr}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"game-start-container\">\r\n          <div className=\"game-input-container\">\r\n            <h1 className=\"board-heading\">Welcome to The Memory Game!!</h1>\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n              <label htmlFor=\"name\">Player Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                value={playerName}\r\n                onChange={(e) => setPlayerName(e.target.value)}\r\n                required\r\n              />\r\n              <Button title=\"Let's Go\" />\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import \"./App.css\";\r\nimport Board from \"./component/Board\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}