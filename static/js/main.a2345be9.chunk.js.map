{"version":3,"sources":["component/Card.jsx","component/Board.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","id","flip","value","setCompareArr","className","onClick","handleClick","src","alt","shuffle","array","sort","Math","random","Board","card","useState","cardDeck","setCardDeck","compareCardArr","setCompareCardArr","gameOver","setGameOver","heading","setHeading","pairCounter","setPairCounter","movesCounter","setMovesCounter","cardLevel","i","push","ceil","createCardValue","resetGame","newState","map","item","preState","Object","prototype","toString","call","JSON","stringify","console","log","setTimeout","disabled","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2345be9.chunk.js","sourcesContent":["function Card(props) {\r\n  let { id, flip, value, setCompareArr } = props;\r\n\r\n  const handleClick = (id) => {\r\n    setCompareArr({ id, value, flip: true });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flip-card\" onClick={() => handleClick(id)} id={id}>\r\n      <div className={`flip-card-inner  ${flip ? \"flip\" : \"no-flip\"}`}>\r\n        <div className=\"flip-card-front\">\r\n          <img\r\n            src=\"https://image.shutterstock.com/image-illustration/try-your-luck-text-on-600w-1865733352.jpg\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"flip-card-back\">\r\n          <h1>{value}</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { useState } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n// shuffle the cardValue array\r\nfunction shuffle(array) {\r\n  array.sort(() => Math.random() - 0.5);\r\n}\r\n\r\n// method to check {} is empty or not\r\nfunction isObjectEmpty(value) {\r\n  return (\r\n    Object.prototype.toString.call(value) === \"[object Object]\" &&\r\n    JSON.stringify(value) === \"{}\"\r\n  );\r\n}\r\n\r\nfunction Board() {\r\n  const cardLevel = 16;\r\n  const card = [];\r\n\r\n  // initialinzing state\r\n  const [cardDeck, setCardDeck] = useState(card);\r\n  const [compareCardArr, setCompareCardArr] = useState({});\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [heading, setHeading] = useState(\"Memory Game!\");\r\n  const [pairCounter, setPairCounter] = useState(1);\r\n  const [movesCounter, setMovesCounter] = useState(0);\r\n\r\n  // creating values of the card\r\n  const createCardValue = (cardLevel) => {\r\n    for (let i = 1; i <= cardLevel; i++) {\r\n      card.push({\r\n        flip: false,\r\n        value: Math.ceil(i / 2),\r\n      });\r\n    }\r\n  };\r\n\r\n  createCardValue(cardLevel); // generating card value\r\n  shuffle(card); //initial game start\r\n\r\n  // resetting game state on game over and on reset button click\r\n  const restartGame = () => {\r\n    resetGame();\r\n    setHeading(\"Memory Game!\");\r\n    setGameOver(false);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    shuffle(card);\r\n    setCardDeck(card);\r\n    setCompareCardArr({});\r\n    setPairCounter(1);\r\n    setMovesCounter(0);\r\n  };\r\n\r\n  // function to check game is ended or not\r\n  const gameEnd = () => {\r\n    if (pairCounter >= cardLevel / 2) {\r\n      setHeading(\"Congratulation you Won!\");\r\n      setGameOver(true);\r\n    }\r\n  };\r\n\r\n  const setCompareArr = (newState) => {\r\n    // updating CardDeck value according to new state value\r\n    setCardDeck(\r\n      cardDeck.map((item, id) => {\r\n        if (id === newState.id) {\r\n          item.flip = newState.flip;\r\n          return item;\r\n        } else {\r\n          return item;\r\n        }\r\n      })\r\n    );\r\n\r\n    // comparring previous click with new click and assigning value accordingly\r\n    setCompareCardArr((preState) => {\r\n      if (isObjectEmpty(preState)) {\r\n        return newState; // prev state is empty so returing new state value\r\n      } else if (preState.id === newState.id) {\r\n        return preState; // prev click and new click on same card, returning same value\r\n      } else if (preState.value === newState.value) {\r\n        setPairCounter(pairCounter + 1); // increasing pairCounter if preValue and newValue is same.\r\n        setMovesCounter(movesCounter + 1);\r\n        console.log(\"Match Found\", pairCounter);\r\n        gameEnd();\r\n        return {};\r\n      } else {\r\n        setMovesCounter(movesCounter + 1);\r\n        setTimeout(() => {\r\n          // setting card value to previous state as pair is not found\r\n          setCardDeck(\r\n            cardDeck.map((item, id) => {\r\n              if (id === preState.id || id === newState.id) {\r\n                item.flip = false;\r\n                return item;\r\n              } else {\r\n                return item;\r\n              }\r\n            })\r\n          );\r\n        }, 500);\r\n        return {};\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"board-header\">\r\n        <h2 className=\"board-heading score\">Moves: {movesCounter}</h2>\r\n        <h2 className=\"board-heading\">{heading}</h2>\r\n\r\n        <button className=\"btn\" onClick={resetGame} disabled={gameOver}>\r\n          Reset\r\n        </button>\r\n      </header>\r\n      <div className=\"board-body\">\r\n        {gameOver ? (\r\n          <div className=\"winnerContainer\">\r\n            <iframe\r\n              title=\"winner Gif\"\r\n              src=\"https://giphy.com/embed/l0HlSDiA6WUytl9oA\"\r\n              className=\"winnerGif\"\r\n            ></iframe>\r\n            <button className=\"btn\" onClick={restartGame}>\r\n              Play Again\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"board-game\">\r\n            {cardDeck.map((item, id) => (\r\n              <Card\r\n                key={id}\r\n                cardDeck={cardDeck}\r\n                {...item}\r\n                id={id}\r\n                compareCardArr={compareCardArr}\r\n                setCompareArr={setCompareArr}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import \"./App.css\";\nimport Board from \"./component/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}